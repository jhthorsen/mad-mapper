NAME
    Mad::Mapper - Map Perl objects to MySQL or PostgreSQL row data

VERSION
    0.01

DESCRIPTION
    Mad::Mapper is base class that allow your objects to map to database
    rows. It is different from other ORMs, where your objects are now in
    center instead of the database.

SYNOPSIS
  Simple
      package MyApp::Model::User;
      use Mad::Mapper -base;

      # Standard class attributes
      has email => '';
      has id => undef;

      # Return array-ref of User::Group objects: $groups = $self->groups;
      # Same, but async: $self = $self->groups(sub { my ($self, $groups) = @_; ... });
      # The result is also cached until $self->fresh->groups(...) is called
      has_many groups => sub {
        'MyApp::Model::Group',
        'SELECT name FROM users WHERE user_id = ?', sub { $_[0]->id },
      }

      # Define methods to find, delete, insert or update the object in storage
      sub _find_sst   { 'SELECT id, email FROM users WHERE email = ?', $_[0]->email }
      sub _delete_sst { 'DELETE FROM users WHERE id = ?', $_[0]->id }
      sub _insert_sst { 'INSERT INTO users ("email") VALUES(?)', $_[0]->email }
      sub _update_sst { 'UPDATE users SET email = ? WHERE id = ?', $_[0]->email, $_[0]->id }

  Complex
    Instead of using the automatic generated methods from simple SQL
    statements, it is possible to do the complete query yourself. Below is
    the example of how the simple "_insert()" method above can be done
    complex:

      package MyApp::Model::User;
      use Mad::Mapper -base;

      sub _insert {
        my ($self, $cb) = @_;

        Mojo::IOLoop->delay(
          sub {
            my ($delay) = @_;
            $self->db->query('INSERT INTO users ("email") VALUES(?)', $self->email, $delay->begin);
          },
          sub {
            my ($delay, $err, $res) = @_;
            return $self->$cb($err) if $err;
            $self->in_storage(1);
            $self->id($res->sth->mysql_insertid);
            $self->$cb('');
          },
        );
      }

ATTRIBUTES
  db
      $db = $self->db;
      $self->db($db_obj);

    Need to hold either a Mojo::Pg::Database or Mojo::mysql::Database
    object.

  in_storage
      $bool = $self->in_storage;
      $self = $self->in_storage($bool);

METHODS
  delete
      $self = $self->delete;
      $self = $self->delete(sub { my ($self, $err) = @_, ... });

    Will delete the object from database if "in_storage".

  save
      $self = $self->save;
      $self = $self->save(sub { my ($self, $err) = @_, ... });

    Will update the object in database if "in_storage" or insert it if not.

  import
    Will set up the caller class with Mad::Mapper functionality if "-base"
    is given as argument. See "SYNOPSIS" for example.

COPYRIGHT AND LICENSE
    Copyright (C) 2014, Jan Henning Thorsen

    This program is free software, you can redistribute it and/or modify it
    under the terms of the Artistic License version 2.0.

AUTHOR
    Jan Henning Thorsen - "jhthorsen@cpan.org"

